package com.group_finity.mascot.environment.home.UI;

import com.group_finity.mascot.Main;
import com.group_finity.mascot.environment.home.HomeUI;
import com.group_finity.mascot.glossbird.AlarmData;
import com.group_finity.mascot.glossbird.AlarmManager;
import com.group_finity.mascot.glossbird.AlarmSave;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Locale;


public class AlarmPanel {

    JFrame alarmPanel;
    JButton button;
    JPanel panel;
    AlarmManager alarmManager;
    int hour = 12;
    int minute = 0;
    boolean enabled;
    boolean AM = false;
    JFormattedTextField hourLabel;
    JFormattedTextField minuteLabel;
    JLabel colon;
    JButton saveButton;
    private JLabel title;
    private JButton addnew;
    private JLabel On;
    private JLabel editLabel;
    private JPanel formPanel;
    private JPanel ToolBarPane;
    private JPanel BorderLayoutPanel;
    private JScrollPane ScrollPane;
    private JToolBar alarmBar;
    private JRadioButton EnabledButton;
    private JLabel Name;
    private JLabel Time;
    private JButton Edit;
    private JScrollBar scrollBar1;

    GroupLayout groupLayout;

    public JToolBar GenerateBar(AlarmData alarm) {
        JToolBar bar = new JToolBar();
        bar.setLayout(new GridLayout(0, 4));
        JRadioButton EnabledButton;
        JLabel nameLabel;

        JLabel timeLabel;
        JButton editButton;

        EnabledButton = new JRadioButton();
        EnabledButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                alarmManager.ToggleAlarm(alarm.getId(), EnabledButton.isEnabled());
            }
        });
        if (alarm.isEnabled()) {
            EnabledButton.setSelected(true);
        }
        nameLabel = new JLabel(alarm.getName());
        timeLabel = new JLabel(alarm.GetFormattedDate());
        editButton = new JButton("Edit");
        editButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                AlarmEditing editTime = new AlarmEditing();
                editTime.setManager(alarmManager);
                alarmManager.SetActiveAlarmData(alarm.getId());
                editTime.run();
            }
        });

        bar.add(EnabledButton);
        bar.add(nameLabel);
        bar.add(timeLabel);
        bar.add(editButton);
        bar.setVisible(true);
        return bar;
    }

    JPanel refPanel;

    JPanel AllAlarms() {
        refPanel = null;
        JPanel panel = new JPanel();
        BoxLayout box = new BoxLayout(panel, BoxLayout.Y_AXIS);
        panel.setLayout(box);
        for (AlarmData data : AlarmSave.getInstance().GetAllAlarms()) {
            JToolBar testBar = GenerateBar(data);
            System.out.println("Adding bar " + data.getName());
            panel.add(testBar);
        }

        return panel;
    }

    public void RefreshVisuals() {
        frame.setVisible(false);
        refPanel = AllAlarms();
        ToolBarPane.validate();
        ToolBarPane.repaint();
        ScrollPane.setViewportView(refPanel);
        // ScrollPane.setSize(frame.getPreferredSize());
        ScrollPane.validate();
        frame.invalidate();
        frame.validate();

        frame.pack();
        frame.setSize(frame.getPreferredSize());
        frame.repaint();
        frame.setVisible(true);
    }

    JFrame frame;

    public void run() {
        frame = new JFrame("AlarmPanel");

        frame.setContentPane(formPanel);
        addnew.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int newId = alarmManager.CreateAlarm();
                AlarmSave.getInstance().Save();
                RefreshVisuals();
            }
        });
        RefreshVisuals();
        frame.setLocation(Main.getInstance().getHome().GetHomePosition().x - 150, Main.getInstance().getHome().GetHomePosition().y);
        //frame.setVisible(true);
    }

    public AlarmPanel() {

    }

    public AlarmPanel(AlarmManager manager) {

        this.alarmManager = manager;
        this.alarmManager.setAlarmPanel(this);
    }


    public void OpenPanel() {
        run();
        // alarmPanel.setVisible(true);
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }


    private void $$$setupUI$$$() {
        formPanel = new JPanel();
        formPanel.setLayout(new GridBagLayout());
        formPanel.setMaximumSize(new Dimension(2147483647, 500));
        formPanel.setMinimumSize(new Dimension(530, 445));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        panel1.setMaximumSize(new Dimension(2147483647, 500));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 3;
        gbc.gridheight = 4;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(15, 15, 15, 15);
        formPanel.add(panel1, gbc);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridBagLayout());
        panel2.setMaximumSize(new Dimension(2147483647, 500));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(15, 15, 15, 15);
        panel1.add(panel2, gbc);
        BorderLayoutPanel = new JPanel();
        BorderLayoutPanel.setLayout(new BorderLayout(0, 0));
        BorderLayoutPanel.setMaximumSize(new Dimension(2147483647, 500));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 2;
        panel2.add(BorderLayoutPanel, gbc);
        ScrollPane = new JScrollPane();
        ScrollPane.setHorizontalScrollBarPolicy(31);
        ScrollPane.setMaximumSize(new Dimension(32767, 200));
        ScrollPane.setMinimumSize(new Dimension(500, 400));
        ScrollPane.setPreferredSize(new Dimension(460, 200));
        ScrollPane.setVerticalScrollBarPolicy(22);
        BorderLayoutPanel.add(ScrollPane, BorderLayout.CENTER);
        ToolBarPane = new JPanel();
        ToolBarPane.setLayout(new BorderLayout(0, 0));
        ToolBarPane.setMaximumSize(new Dimension(2147483647, 400));
        ToolBarPane.setMinimumSize(new Dimension(400, 36));
        ScrollPane.setViewportView(ToolBarPane);
        alarmBar = new JToolBar();
        alarmBar.setFloatable(false);
        alarmBar.setFocusable(false);
        alarmBar.setMinimumSize(new Dimension(300, 36));
        alarmBar.setPreferredSize(new Dimension(300, 36));
        ToolBarPane.add(alarmBar, BorderLayout.CENTER);
        EnabledButton = new JRadioButton();
        EnabledButton.setInheritsPopupMenu(true);
        EnabledButton.setLabel("");
        EnabledButton.setText("");
        alarmBar.add(EnabledButton);
        Name = new JLabel();
        Name.setText("Label");
        alarmBar.add(Name);
        Time = new JLabel();
        Time.setText("Label");
        alarmBar.add(Time);
        Edit = new JButton();
        Edit.setText("Edit");
        alarmBar.add(Edit);
        scrollBar1 = new JScrollBar();
        alarmBar.add(scrollBar1);
        On = new JLabel();
        On.setText("on?");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        panel2.add(On, gbc);
        editLabel = new JLabel();
        editLabel.setText("edit");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.insets = new Insets(0, 0, 0, 25);
        panel2.add(editLabel, gbc);
        addnew = new JButton();
        addnew.setLabel("+ Add New");
        addnew.setText("+ Add New");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 2;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(addnew, gbc);
        title = new JLabel();
        Font titleFont = this.$$$getFont$$$("JetBrains Mono", Font.BOLD, 24, title.getFont());
        if (titleFont != null) title.setFont(titleFont);
        title.setText("Alarms");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.weighty = 1.0;
        formPanel.add(title, gbc);
        ScrollPane.setVerticalScrollBar(scrollBar1);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return formPanel;
    }
}
