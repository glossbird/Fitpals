package com.group_finity.mascot.environment.home.UI;


import com.group_finity.mascot.Main;
import com.group_finity.mascot.glossbird.TimerSystem;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Locale;
import java.util.Set;

public class TimerPanel {
    private JPanel Clock;
    private JSpinner Hour;
    private JLabel colon;
    private JSpinner Minute;
    private JComboBox SetSound;
    private JComboBox SetBehavior;
    private JButton TimeUp;
    private JButton TimeDown;
    private JButton Start;
    private JLabel Timer;
    private JPanel contentPane;

    public TimerSystem timer;
    boolean running;

    public TimerPanel() {
        run();
    }

    public void run() {
        JFrame frame = new JFrame("TimerPanel");
        Start.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ButtonToggle();
            }
        });
        TimeUp.setText("+");
        TimeUp.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                timer.ChangeTime(15);
            }
        });
        TimeDown.setText("-");
        TimeDown.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                timer.ChangeTime(-15);
            }
        });

        Hour.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                timer.setMinute((Integer) Hour.getValue());
            }
        });


        Minute.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                int value = (int) Minute.getValue();
                if (value < 0) {
                    value = 59;
                    Minute.setValue(value);
                } else if (value > 59) {
                    value = 0;
                    Minute.setValue(value);
                }
                Minute.setEditor(new JSpinner.NumberEditor(Minute, "00"));
                timer.setSecond((Integer) Minute.getValue());

            }
        });

        frame.setContentPane(contentPane);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.pack();
        frame.setLocation(Main.getInstance().getHome().GetHomePosition().x - 150, Main.getInstance().getHome().GetHomePosition().y);
        frame.setVisible(true);
        running = false;
    }

    public void init() {

    }

    public void SetTimeText(int minute, int second) {
        Hour.setValue(minute);
        Minute.setValue(second);
    }


    public void RefreshText() {
        String hour = String.valueOf((timer.minute));
        String minute = String.valueOf(((timer.second)));

        if (timer.second == 0) {
            minute = "00";
        }
        this.Hour.setValue(timer.minute);
        this.Minute.setValue(timer.second);
    }


    public void SetSound() {

    }

    public void SetBehavior() {

    }

    public TimerSystem getTimer() {
        return timer;
    }

    public void setTimer(TimerSystem timer) {
        this.timer = timer;
    }

    public void UpdateStartText() {
        if (running) {
            Start.setText("CANCEL");
        } else {
            Start.setText("START");
        }
    }

    public void ButtonToggle() {
        if (!running) {
            Start();
        } else {
            Cancel();
        }
        UpdateStartText();
    }

    public void Cancel() {
        timer.Stop();
        running = false;

    }


    public void Start() {
        running = true;
        timer.Start();
    }


    public void RefreshTimesFromDelta(float delta) {
        int noMilis = (int) (delta / 1000);
        int minute = noMilis / 60;

        int second = noMilis % 60;

        String minuteS = String.valueOf(((second)));
        if (second == 0) {
            minuteS = "00";
        }
        String hour = String.valueOf((minute));

        this.Hour.setValue(minute);
        this.Minute.setValue(second);

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridBagLayout());
        Timer = new JLabel();
        Font TimerFont = this.$$$getFont$$$("JetBrains Mono", Font.BOLD, 36, Timer.getFont());
        if (TimerFont != null) Timer.setFont(TimerFont);
        Timer.setText("Timer");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        contentPane.add(Timer, gbc);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridheight = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(0, 25, 0, 0);
        contentPane.add(panel1, gbc);
        TimeUp = new JButton();
        TimeUp.setText("Button");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(TimeUp, gbc);
        TimeDown = new JButton();
        TimeDown.setText("Button");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(TimeDown, gbc);
        Start = new JButton();
        Start.setText("Start");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(Start, gbc);
        Clock = new JPanel();
        Clock.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridheight = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel1.add(Clock, gbc);
        Clock.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        Hour = new JSpinner();
        Hour.setMaximumSize(new Dimension(66, 17));
        Hour.setMinimumSize(new Dimension(66, 17));
        Hour.setPreferredSize(new Dimension(66, 17));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        Clock.add(Hour, gbc);
        colon = new JLabel();
        colon.setText(":");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        Clock.add(colon, gbc);
        Minute = new JSpinner();
        Minute.setMaximumSize(new Dimension(66, 17));
        Minute.setMinimumSize(new Dimension(66, 17));
        Minute.setPreferredSize(new Dimension(66, 17));
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        Clock.add(Minute, gbc);
        SetBehavior = new JComboBox();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        contentPane.add(SetBehavior, gbc);
        SetSound = new JComboBox();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        contentPane.add(SetSound, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}
